name: "Digital Ocean Deploy"
description: "Digital Ocean kubernetes deploy"
inputs:
  branch-develop:
    required: false
    description: "Develop branch"
    default: "develop"
  branch-production:
    required: false
    description: "Production branch"
    default: "main"
  kubeconfig: 
    required: true
    description: "kubernetes b64 config"
  registry:
    required: true
    description: "Image registry"
  image-name: 
    required: true
    description: "Name of the image to build"
  image-tag-suffix: 
    required: false
    description: "suffix for the image tag"
  kube-resource:
    required: false
    description: "Kubernetes resources to rollout"
  kube-namespace-prefix:
    required: false
    default: "default"
    description: "Kubernetes namespace prefix"
  dockerfile-path:
    required: false
    description: "Path to the Dockerfile"
    default: 'Dockerfile'
  newrelic-license-key:
    required: false
    description: "New Relic license key"
  aws-access-key-id:
    required: true
    description: "AWS Access Key ID"
  aws-secret-access-key:
    required: true
    description: "AWS Secret Access Key"
runs:
  using: composite
  steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: us-east-1

    - name: Setup Environment
      shell: bash
      run: |-
        if [ ${{ github.event_name }} == "pull_request" ]; then 
          branch=$(echo ${{ github.base_ref }}  | tr / -)
        else 
          branch=$(echo ${GITHUB_REF#refs/heads/} | tr / -)
        fi
        if [ $branch = ${{inputs.branch-production}} ]; then 
          env="production";
          latest_tag="latest"
        elif [ $branch = ${{inputs.branch-develop}} ]; then 
          env="develop";
          latest_tag="${env}-latest"
        else 
          env="develop";
          latest_tag="${env}-latest"
        fi
        echo "ENV=$(echo $env)" >> $GITHUB_ENV
        echo "LATEST_TAG=$(echo $latest_tag)" >> $GITHUB_ENV
        tag="${env}${{inputs.image-tag-suffix}}"
        echo "TAG=$(echo $tag)" >> $GITHUB_ENV

    - name: AWS ECR Login
      shell: bash
      run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{inputs.registry}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    -
      name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        # Disable cache due to https://github.com/docker/build-push-action/issues/858. Issue Closed
        # cache-from: |
        #   type=registry,ref=${{inputs.registry}}/${{inputs.image-name}}:cache
        # cache-to: |
        #   type=registry,ref=${{inputs.registry}}/${{inputs.image-name}}:cache
        build-args: |
          NODE_ENV=${{ env.ENV }}
        file: ${{ inputs.dockerfile-path }}1
        tags: >-
          ${{inputs.registry}}/${{inputs.image-name}},${{inputs.registry}}/${{inputs.image-name}}:${{env.LATEST_TAG}},${{inputs.registry}}/${{inputs.image-name}}:${{env.TAG}}

    # - name: Build image
    #   shell: bash
    #   run: |
    #     docker buildx build \
    #       --build-arg NODE_ENV=${{ env.ENV }} \
    #       --build-arg CONSUL_HTTP_ADDR=${{ inputs.consul-http-addr }} \
    #       --build-arg CONSUL_HTTP_TOKEN=${{ inputs.consul-http-token }} \
    #       --tag ${{inputs.registry}}/${{inputs.image-name}} \
    #       --tag ${{inputs.registry}}/${{inputs.image-name}}:${{env.LATEST_TAG}} \
    #       --tag ${{inputs.registry}}/${{inputs.image-name}}:${{env.TAG}} \
    #       --push \
    #       .


    - name: Set K8s resource image
      if: ${{inputs.kubeconfig && inputs.kube-resource}}
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ inputs.kubeconfig }}
      with:
        args: -n ${{inputs.kube-namespace-prefix}}-${{env.ENV}} set image ${{inputs.kube-resource}} *=${{inputs.registry}}/${{inputs.image-name}}:${{env.TAG}}

    - name: Update SSM
      uses: joshghent/aws-ssm-parameter-store@v2.2.0
      with:
        ssm-path: "${{env.ENV}}/${{inputs.image-name}}/version"
        ssm-value: ${{ env.TAG }}
        aws-region: us-east-1
        ssm-value-type: "String"